# -*- coding: utf-8 -*-
"""CS_4_ML_Lab_Polynomial Regression

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eN8jH15MUjIvRGUfWovCBYaBdLKu9GLJ

# Polynomial Regression

## Fit a polynomial to a given data set

In this example for the given dataset, the polynomial fitted is of the form
$$ h_\theta (x) = \theta_0 + \theta_1 x + \theta_2 x^2 + \theta_3 x^3 $$

Reference: https://towardsdatascience.com/

### Step 1: Import libraries and dataset
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Importing the dataset
#dataset = pd.read_csv('https://s3.us-west-2.amazonaws.com/public.gamelab.fun/dataset/position_salaries.csv')

dataset = pd.read_csv('position_salaries.csv')
# change the file path accordingly

X = dataset.iloc[:, 1:2].values
y = dataset.iloc[:, 2].values

print(type(dataset))
print(X.shape)
print(y.shape)
dataset.head()

"""### Step 2: Prepare and visualize the given data set"""

plt.scatter(X,y, color = 'blue')
plt.title('Position vs Salary')
plt.xlabel('Position level')
plt.ylabel('Salary')
plt.show()

"""### Step 3: Create and train the machine learning model"""

# Fitting Polynomial Regression to the dataset
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures

poly_reg = PolynomialFeatures(degree=3) # eqn of deg 3
X_poly = poly_reg.fit_transform(X) # x is of deg 3

pol_reg = LinearRegression()
pol_reg.fit(X_poly, y)

"""### Step 4: Visualize the results"""

# Visualizing the Polymonial Regression results

plt.scatter(X, y, color='red')
plt.plot(X, pol_reg.predict(poly_reg.fit_transform(X)), color='blue')
plt.title('Polynomial Regression')
plt.xlabel('Position level')
plt.ylabel('Salary')
plt.show()

# datapoints less ==> overfittng as degree increases

"""### Step 5: Prediction"""

# predict the values for the given dataset X

Y_pred = pol_reg.predict(poly_reg.fit_transform(X))

"""### Step 6: Performance measures"""

from sklearn.metrics import mean_squared_error, r2_score

# The mean squared error
print("Mean squared error = %.2f" % mean_squared_error(y, Y_pred))

# Explained variance score: 1 is perfect prediction
print('Variance score = %.2f' % r2_score(y, Y_pred))